#!/bin/bash
#################################################################
#      Vilmar Catafesta 			<vcatafesta@gmail.com>      	 #
#      license: 						MIT		                      #
#      created: 						2020/09/20   	                #
#      altered:                  2020/09/27	                   #
#################################################################
declare -r _APP_="chili-clonedisk"
declare -r _VERSION_="v1.0.11-20222402"
readonly DEPENDENCIES=(which lsblk cut dialog pv grep sed cat awk tput dd)
#. /lib/lsb/init-functions

# flag dialog exit status codes
: ${D_OK=0}
: ${D_CANCEL=1}
: ${D_HELP=2}
: ${D_EXTRA=3}
: ${D_ITEM_HELP=4}
: ${D_ESC=255}

# vars bool
DIAHORA=`date +"%d%m%Y-%T" | sed 's/://g'`
trancarstderr=2>&-
true=0
TRUE=0
OK=0
ok=0
NOK=1
nok=1
FALSE=1
false=1
falso=1
CANCEL=1
ESC=255
HEIGHT=0
WIDTH=0

# Use a colored prefix
NORMAL="\\033[0;39m"         # Standard console grey
SUCCESS="\\033[1;32m"        # Success is green
WARNING="\\033[1;33m"        # Warnings are yellow
FAILURE="\\033[1;31m"        # Failures are red
INFO="\\033[1;36m"           # Information is light cyan
BRACKET="\\033[1;34m"        # Brackets are blue

BMPREFIX="     "
SUCCESS_PREFIX="${SUCCESS}  *  ${NORMAL}"
FAILURE_PREFIX="${FAILURE}*****${NORMAL}"
WARNING_PREFIX="${WARNING} *** ${NORMAL}"
SKIP_PREFIX="${INFO}  S  ${NORMAL}"

SUCCESS_SUFFIX="${BRACKET}[${SUCCESS}  OK  ${BRACKET}]${NORMAL}"
FAILURE_SUFFIX="${BRACKET}[${FAILURE} FAIL ${BRACKET}]${NORMAL}"
WARNING_SUFFIX="${BRACKET}[${WARNING} WARN ${BRACKET}]${NORMAL}"
SKIP_SUFFIX="${BRACKET}[${INFO} SKIP ${BRACKET}]${NORMAL}"

BOOTLOG=$HOME/bootlog
KILLDELAY=3
SCRIPT_STAT="0"

# Set any user specified environment variables e.g. HEADLESS
[ -r /etc/sysconfig/rc.site ]  && . /etc/sysconfig/rc.site

## Screen Dimensions
# Find current screen size
if [ -z "${COLUMNS}" ]; then
   COLUMNS=$(stty size)
   COLUMNS=${COLUMNS##* }
fi

# When using remote connections, such as a serial port, stty size returns 0
if [ "${COLUMNS}" = "0" ]; then
   COLUMNS=80
fi

## Measurements for positioning result messages
COL=$((${COLUMNS} - 8))
WCOL=$((${COL} - 2))

## Set Cursor Position Commands, used via echo
SET_COL="\\033[${COL}G"      # at the $COL char
SET_WCOL="\\033[${WCOL}G"    # at the $WCOL char
CURS_UP="\\033[1A\\033[0G"   # Up one line, at the 0'th char
CURS_ZERO="\\033[0G"

#distro
xdistro=$(uname -n)

# variavel comuns
grafico=$true
xapp="Chili clonedisk"
ccabec="Chili clonedisk $_VERSION_"
ctitle="$cdistro Linux"
welcome="Welcome to the $xapp"

# flag para disco/particao/formatacao/montagem
: ${LDISK=0}
: ${LPARTITION=0}
: ${LFORMAT=0}
: ${LMOUNT=0}
: ${TARSUCCESS=$false}
: ${STANDALONE=$false}
: ${STARTXFCE4=$true}
: ${xUUIDSWAP=""}
: ${xPARTSWAP=""}
: ${xPARTEFI=""}
: ${lEFI=$false}
: ${LGRUB="EFI"}
: ${LAUTOMATICA=$false}
: ${xLABEL=$cdistro}

# choosedisk
: ${devices=()}
: ${disks=()}
: ${size=()}
: ${model=()}

replicate(){
    for counter in $(seq 1 $2);
    do
        printf "%s" $1
    done
}

function sh_disk()
{
#	disks=($(awk -e '$4 ~ /nvme[0-9][a-z][0-9]$/ {print $4}' /proc/partitions)
#	 		 $(awk -e '$4 ~ /sd[a-z]$/ {print $4}' /proc/partitions))
	disks=($(lsblk -P -o TYPE,NAME,PATH,NAME,SIZE,MODEL | awk '$0~/disk/{print $2}' | sed 's/[NAME=*\"]//g'))
}

function sh_disk_device()
{
#	devices=($(awk -e '$4 ~ /nvme[0-9][a-z][0-9]$/ {print "/dev/"$4}' /proc/partitions)
#	 		 $(awk -e '$4 ~ /sd[a-z]$/ {print "/dev/"$4}' /proc/partitions))
	devices=($(lsblk -P -o TYPE,NAME,PATH,NAME,SIZE,MODEL | awk '$0~/disk/{print $3}' | sed 's/[PATH=*\"]//g'))
}

function sh_disk_size()
{
#	size=($(awk -e '$4 ~ /nvme[0-9][a-z][0-9]$/ {$x=sprintf("%10.2fGiB", $3/1024/1024); print $x}' /proc/partitions)
#	   	$(awk -e '$4 ~ /sd[a-z]$/             {$x=sprintf("%10.2fGiB", $3/1024/1024); print $x}' /proc/partitions))
	size=($(lsblk -P -o TYPE,NAME,PATH,NAME,SIZE,MODEL | awk '$0~/disk/{print $5}' | sed 's/[SIZE=*\"]//g'))
}

function sh_disk_model()
{
#	model=($(fdisk -l | grep -E "(Modelo|Model)"|sed 's/^[:\t]*//'|cut -d':' -f2 | sed 's/^[ \t]*//;s/[ \t]*$//'|sed 's/[[:space:]]\+/_/g'))
	model=($(lsblk -P -o TYPE,MODEL | egrep "disk" | cut -d'"' -f4- | sed 's/"//g'| sed 's/[[:space:]]\+/_/g'))
}

function setvarcolors()
{
   if tput setaf 1 &> /dev/null; then
      tput sgr0; # reset colors
      bold=$(tput bold);
      reset=$(tput sgr0);
      black=$(tput setaf 0);
      blue=$(tput setaf 33);
      cyan=$(tput setaf 37);
      green=$(tput setaf 64);
      orange=$(tput setaf 166);
      purple=$(tput setaf 125);
      red=$(tput setaf 124);
      violet=$(tput setaf 61);
      white=$(tput setaf 15);
      yellow=$(tput setaf 136);
      pink="\033[35;1m";
   else
      bold='';
      reset="\e[0m";
      black="\e[1;30m";
      blue="\e[1;34m";
      cyan="\e[1;36m";
      green="\e[1;32m";
      orange="\e[1;33m";
      purple="\e[1;35m";
      red="\e[1;31m";
      violet="\e[1;35m";
      white="\e[1;37m";
      yellow="\e[1;33m";
      pink="\033[35;1m";
   fi
}

function DOT()
{
	printf "${blue}:: ${reset}"
	return
}

function inkey()
{
	read -t "$1" -n1 -r -p "" lastkey
}

function arraylen()
{
	for item in ${array[*]}
	do
		printf "   %s\n" $item
	done
	arraylength=${"$1"[*]}
}

function timespec()
{
	STAMP="$(echo `date +"%b %d %T %:z"` `hostname`) "
	return 0
}

function log_success_msg()
{
	echo -n -e "${BMPREFIX}${@}"
	echo -e "${CURS_ZERO}${SUCCESS_PREFIX}${SET_COL}${SUCCESS_SUFFIX}"

	# Strip non-printable characters from log file
	logmessage=`echo "${@}" | sed 's/\\\033[^a-zA-Z]*.//g'`

	timespec
	echo -e "${STAMP} ${logmessage} OK" >> ${BOOTLOG}

	return 0
}

function log_success_msg2()
{
	echo -n -e "${BMPREFIX}${@}"
	echo -e "${CURS_ZERO}${SUCCESS_PREFIX}${SET_COL}${SUCCESS_SUFFIX}"
	echo " OK" >> ${BOOTLOG}
	return 0
}

function log_failure_msg()
{
	echo -n -e "${BMPREFIX}${@}"
	echo -e "${CURS_ZERO}${FAILURE_PREFIX}${SET_COL}${FAILURE_SUFFIX}"

   # Strip non-printable characters from log file

   timespec
   logmessage=`echo "${@}" | sed 's/\\\033[^a-zA-Z]*.//g'`
	echo -e "${STAMP} ${logmessage} FAIL" >> ${BOOTLOG}

   return 0
}

function log_failure_msg2()
{
	echo -n -e "${BMPREFIX}${@}"
	echo -e "${CURS_ZERO}${FAILURE_PREFIX}${SET_COL}${FAILURE_SUFFIX}"
	echo "FAIL" >> ${BOOTLOG}
	return 0
}

function log_warning_msg()
{
	echo -n -e "${BMPREFIX}${@}"
   echo -e "${CURS_ZERO}${WARNING_PREFIX}${SET_COL}${WARNING_SUFFIX}"

   # Strip non-printable characters from log file
   logmessage=`echo "${@}" | sed 's/\\\033[^a-zA-Z]*.//g'`
   timespec
   echo -e "${STAMP} ${logmessage} WARN" >> ${BOOTLOG}

   return 0
}

function log_skip_msg()
{
	echo -n -e "${BMPREFIX}${@}"
   echo -e "${CURS_ZERO}${SKIP_PREFIX}${SET_COL}${SKIP_SUFFIX}"

   # Strip non-printable characters from log file
   logmessage=`echo "${@}" | sed 's/\\\033[^a-zA-Z]*.//g'`
   echo "SKIP" >> ${BOOTLOG}

   return 0
}

function log_info_msg()
{
	echo -n -e "${BMPREFIX}${@}"

   # Strip non-printable characters from log file
   logmessage=`echo "${@}" | sed 's/\\\033[^a-zA-Z]*.//g'`
   timespec
   echo -n -e "${STAMP} ${logmessage}" >> ${BOOTLOG}

   return 0
}

function log_info_msg2()
{
	echo -n -e "${@}"

	# Strip non-printable characters from log file
   logmessage=`echo "${@}" | sed 's/\\\033[^a-zA-Z]*.//g'`
   echo -n -e "${logmessage}" >> ${BOOTLOG}

   return 0
}

function evaluate_retval()
{
	local error_value="${?}"

	if [ ${error_value} = 0 ]; then
		log_success_msg2
	else
		log_failure_msg2
   	fi
	return ${error_value}
}

function is_true()
{
   [ "$1" = "1" ] || [ "$1" = "yes" ] || [ "$1" = "true" ] ||  [ "$1" = "y" ] || [ "$1" = "t" ]
}


function sh_trapErro()
{
	dialog --msgbox "Voce pressionou ctrl-c" 7 60
}


function confirma()
{
	[ "$1" -ne 0 ] && { conf "INFO" "$2"; return $?;}
}

function msg()
{
	if [ $grafico -eq $true ]; then
        dialog              \
        --no-collapse       \
        --title     "$1"    \
        --infobox   "\n$2"  \
        6 60
    else
        log_info_msg "$2"
    fi
}

function mensagem()
{
	dialog                  	\
		--title 		"$ctitle"  	\
		--backtitle	"$ccabec"	\
		--infobox 	"$*"        \
    	6 60
}

function tolower()
{
	$1 | tr 'A-Z' 'a-z'
}

function toupper()
{
	$1 | tr 'a-z' 'Z-A'
}

function display_result()
{
	local xbacktitle=$ccabec

	if [ "$3" != "" ] ; then
		xbacktitle="$3"
	fi

	dialog 								\
		--title 		"$2"				\
		--beep                     \
		--no-collapse					\
		--no-cr-wrap               \
		--backtitle	"$xbacktitle"	\
		--msgbox 	"$1" 				\
		0 0
}

function alerta()
{
#	whiptail								      \
	dialog								      \
		--colors			 			     		\
		--title 		"$1" 			     		\
		--no-collapse							\
		--cr-wrap    		           		\
		--backtitle	"$ccabec"		      \
		--msgbox 	"\Z2$2\n\Z1$3\n\Z3$4\n\Z4$5\n\Z5$6"	\
		0 0
}

function info()
{
	dialog 			 				\
		--colors                \
		--beep                  \
		--title 		"$cmsg002"	\
		--backtitle	"$ccabec"	\
		--msgbox 	"\Z1$*"		\
		10 60
}

function conf()
{
	xtitle="$1"
	shift
	dialog								\
		--title 		"$xtitle" 		\
		--backtitle	"$ccabec"		\
		--yes-label "$yeslabel"		\
		--no-label  "$nolabel"		\
		--yesno 		"$*" 				\
		0 0
		return $?
}

function confmulti()
{
	xtitle="$1"
	shift
	dialog							\
		--title 		"$xtitle"	\
		--backtitle	"$ccabec"	\
		--yes-label "$yeslabel"	\
		--no-label  "$nolabel"	\
		--yesno 		"$*"			\
		10 100
		return $?
}

function inkey1()
{
	dialog							\
		--title 		"$2" 			\
		--backtitle	"$ccabec"	\
		--pause 		"$2"			\
		0 0 			"$1"
}

function quit()
{
	[ $? -ne 0 ] && { clear ; exit ;}
}

function sh_checkdisk()
{
	local nchoice=0
	dsk=$(df -h | grep "$sddest" | awk '{print $1, $2, $3, $4, $5, $6, $7}')
	if [ "$dsk" <> " " ]; then
		conf "$cwarning" "\n$cmsg_all_mounted_part\n\n$dsk\n\n$cmsg_dismount"
		nchoice=$?
		if [ $nchoice = 0 ]; then
			for i in $(seq 1 10); do
				umount -f -rl $sddest$i 2> /dev/null
			done
		fi
	fi
	return $nchoice
}

function size_to_human(){
   awk -v size="$1" '
   BEGIN {
      suffix[1] = "B"
      suffix[2] = "KiB"
      suffix[3] = "MiB"
      suffix[4] = "GiB"
      suffix[5] = "TiB"
      suffix[6] = "PiB"
      suffix[7] = "EiB"
      count = 1

      while (size > 1024) {
         size /= 1024
         count++
      }

      sizestr = sprintf("%.2f", size)
      sub(/\.?0+$/, "", sizestr)
      printf("%s %s", sizestr, suffix[count])
   }'
}

function now()
{
	DIAHORA=`date +"%d%m%Y-%T" | sed 's/://g'`
   printf "%s\n" $DIAHORA
}

function sh_backup_partitions()
{
	local disk="${1}"
	local device="${2}"
	local cdatetime=$(now)
	local tmpdir="/tmp/$_APP_"
	local filetmp="$tmpdir/${device}.$cdatetime.dump"

	mkdir -p $tmpdir 2> /dev/null
	sfdisk -d $disk > $filetmp 2> /dev/null
	alerta "BACKUP DA TABELA DE PARTICOES" 	\
			 "Dispositivo : $disk" 					\
			 "  Backup on : ${filetmp}"			\
			"$(replicate "=" 80)" 					\
			 "$(cat $filetmp)"
}

function sh_restore_partitions()
{
	sfdisk $sd < /tmp/sda.dump
}

function choosedisk()
{
	while true
	do
		# Choose disk to be parted
		################################################################
#		devices=($(fdisk -l | egrep -o '/dev/sd[a-z]|/dev/nvme[0-9][a-z][0-9]'|uniq))
#		devices=($(awk -e '$4 ~ /nvme[0-9][a-z][0-9]$/ {print "/dev/"$4}' /proc/partitions)
#					$(awk -e '$4 ~ /sd[a-z]$/ {print "/dev/"$4}' /proc/partitions))
#		size=($(fdisk -l|sed -n '/sd[a-z]:/p'|awk '{print $3$4}'|sed 's/://p'|sed 's/[,\t]*$//'|awk '{printf "%10s\n", $1}'))
#		size=($(awk -e '$4 ~ /nvme[0-9][a-z][0-9]$/ {$x=sprintf("%10.2fGiB", $3/1024/1024); print $x}' /proc/partitions)
#				$(awk -e '$4 ~ /sd[a-z]$/             {$x=sprintf("%10.2fGiB", $3/1024/1024); print $x}' /proc/partitions))
#		model=($(fdisk -l | grep -E "(Modelo|Model)"|sed 's/^[:\t]*//'|cut -d':' -f2 | sed 's/^[ \t]*//;s/[ \t]*$//'|sed 's/[[:space:]]\+/_/g'))

#lsblk -a -n -P -o NAME,SIZE,MODEL,TYPE | grep disk

		sh_disk
		sh_disk_device
		sh_disk_size
		sh_disk_model

    	LDISK=0
		local xmsg=$cmsg_disco_origem
		local array=()
#		local devices=()
		local i=0
		local x=0
		local y=0
		for i in ${devices[@]}
		do
#			devices[((n++))]="/dev/$i"
			array[((n++))]="$i"
			array[((n++))]="[${size[((x++))]}]  ${model[((y++))]}"
		done

    	sd=$(dialog 		 																			\
    				--title 			"$xmsg"								  							\
    				--backtitle	 	"$ccabec"				 									\
					--ok-label		"$cmsg_select" 												\
    				--cancel-label "$buttonback"													\
    				--colors																				\
    				--extra-button																		\
    				--extra-label  "$buttonpart"													\
    				--menu 			"\n$cmsg009" 0 0 0 "${array[@]}" 2>&1 >/dev/tty 	)

    	exit_status=$?
    	case $exit_status in
			$ESC)
    			init
    			;;
    		$CANCEL)
    			init
    			;;
    		3)
         	local result=$( fdisk -l $sd );
    			display_result "$result" "$csmg013" "$cmsg_part_disk"
    			continue
    			;;
    	esac

    	if [ "$1" = "SEE" ] ; then
    		local result=$( fdisk -l $sddest )
    		display_result "$result" "$csmg013" "$cmsg_part_disk"
    		continue
    	fi

    	if [ $sd != "" ]; then
			{	local item
            index=0
            for item in ${devices[*]}
            do
            	[ $item = $sd ] && { break; }
               ((index++))
            done
			}
			DEVICE_ORIGEM="${disks[index]}"
			MODEL_ORIGEM="$sd [${size[index]}] [${model[index]}]"
			sh_backup_partitions "${sd}" "${DEVICE_ORIGEM}"
			choosediskdestin
    	fi
    	break
    done
}

function choosediskdestin()
{
	while true
	do
		# Choose disk
		################################################################
#		devices=($(fdisk -l | egrep -o '/dev/sd[a-z]'|uniq))
#		size=($(fdisk -l|sed -n '/sd[a-z]:/p'|awk '{print $3$4}'|sed 's/://p'|sed 's/[,\t]*$//'|awk '{printf "%10s\n", $1}'))
#		model=($(fdisk -l | grep -E "(Modelo|Model)"|sed 's/^[:\t]*//'|cut -d':' -f2 | sed 's/^[ \t]*//;s/[ \t]*$//'|sed 's/[[:space:]]\+/_/g'))
#		devices=($(awk -e '$4 ~ /nvme[0-9][a-z][0-9]$/ {print "/dev/"$4}' /proc/partitions)
#					$(awk -e '$4 ~ /sd[a-z]$/ {print "/dev/"$4}' /proc/partitions))
#		disks=($(awk -e '$4 ~ /nvme[0-9][a-z][0-9]$/ {print $4}' /proc/partitions)
#					$(awk -e '$4 ~ /sd[a-z]$/ {print $4}' /proc/partitions))
#		size=($(fdisk -l|sed -n '/sd[a-z]:/p'|awk '{print $3$4}'|sed 's/://p'|sed 's/[,\t]*$//'|awk '{printf "%10s\n", $1}'))
#		size=($(awk -e '$4 ~ /nvme[0-9][a-z][0-9]$/ {$x=sprintf("%10.2fGiB", $3/1024/1024); print $x}' /proc/partitions)
#				$(awk -e '$4 ~ /sd[a-z]$/             {$x=sprintf("%10.2fGiB", $3/1024/1024); print $x}' /proc/partitions))
#		model=($(fdisk -l | grep -E "(Modelo|Model)"|sed 's/^[:\t]*//'|cut -d':' -f2 | sed 's/^[ \t]*//;s/[ \t]*$//'|sed 's/[[:space:]]\+/_/g'))

#		sh_disk
#		sh_disk_device
#		sh_disk_size
#		sh_disk_model

    	LDISK=0
		local xmsg=$cmsg_disco_destino
		local array=()
#		local devices=()
		local i=0
		local x=0
		local y=0
#		for i in ${disks[@]}
		for i in ${devices[@]}
		do
#			devices[((n++))]="/dev/$i"
#			array[((n++))]="/dev/$i"
			array[((n++))]="$i"
			array[((n++))]="[${size[((x++))]}]  ${model[((y++))]}"
		done

    	sddest=$(dialog 		 																		\
    				--title 			"$xmsg"	  			  			  							   \
    				--backtitle	 	"$ccabec"					 									\
					--ok-label		"$cmsgOK"	 													\
    				--cancel-label "$buttonback"													\
    				--extra-button																		\
    				--extra-label  "$buttonpart"													\
    				--menu 			"\nSOURCE DISK: $MODEL_ORIGEM\n\n$cmsgdest" 0 0 0 "${array[@]}" 2>&1 >/dev/tty 	)

    	exit_status=$?
    	case $exit_status in
			$ESC)
    			init
    			;;
    		$CANCEL)
    			choosedisk
    			;;
    		3)
         	local result=$( fdisk -l $sd );
    			display_result "$result" "$csmg013" "$cmsg_part_disk"
    			continue
    			;;
    	esac

    	if [ "$1" = "SEE" ] ; then
    		local result=$( fdisk -l $sddest )
    		display_result "$result" "$csmg013" "$cmsg_part_disk"
    		continue
    	fi

    	if [ $sddest != "" ]; then
			{	local item
            index=0
            for item in ${devices[*]}
            do
            	[ $item = $sddest ] && { break; }
               ((index++))
            done
			}

			DEVICE_DESTINO="${disks[index]}"
			MODEL_DESTINO="$sddest [${size[index]}] [${model[index]}]"

	    	if [ $sd == $sddest ]; then
				alerta " *** WING *** " "\n   \Z1Disco ORIGEM e DESTINO não podem ser os mesmos! \n\n      \Z4SOURCE DISK : \Z1\Zr$MODEL_ORIGEM\ZR\n \Z4DISK DESTINATION : \Z1\Zr$MODEL_DESTINO\ZR"
				init
				return
			fi

			sh_backup_partitions "${sddest}" "${DEVICE_DESTINO}"

			sh_checkdisk
			local nmontada=$?
			if [ $nmontada = 1 ]; then
				alerta "CHOOSEDISK" "$cmsg_nec_dismount"
			fi
			sh_confclone
		fi
		break
    done
}

function sh_confclone()
{
	conf 	" *** WARNING *** " 								\
			"\n$cmsgTodos_os_dados_serao_perdidos\n" 	\
			"${MODEL_DESTINO}" 								\
			"\n\n       SOURCE DISK: $MODEL_ORIGEM \n  DISK DESTINATION: $MODEL_DESTINO" \
			"\n\n" 																								\
     		"Continuar com o clone?\n"

	format=$?
	if [ $format = 0 ] ; then
		sh_domkclone
	fi
	return $format
}

function sh_domkclone()
{
	LFORMAT=0
	mensagem "$cmsg_Formatando_particao: $sd TO $sddest"
	(pv -n $sd | 												\
	dd of=$sddest conv=notrunc,noerror,sync) 2>&1 |	\
	dialog --gauge 											\
	"Running cloning dd command (dd if=$sd of=$sddest conv=notrunc,noerror,sync), please wait...\n\n     SOURCE DISK : $MODEL_ORIGEM \n DISK DESTINATION: $MODEL_DESTINO" 10 84 0
	local nchoice=$?
	if [ $nchoice = $true ]; then
		display_result "$(fdisk -l $sddest)"
		LFORMAT=1
   fi
	return $nchoice
}

function pt_BR()
{
	lang="pt_BR"
  	cmsgErro="ERRO"
	buttonback="Voltar"
	buttonpart="Info disco"
  	cmsgNaoEncontreiOComando="não encontrei o comando "
  	cmsgEsseScriptPrecisaDosComandosListadosAcima="Esse script precisa dos comandos listados acima"
   cmsgInstaleOuVerifique="Instale-os e/ou verifique se estão no seu \$PATH"
	cmsgOK="Ok"
	cmsg000="Sair"
	cmsg_select="Selecionar"
	cmsg001=$ccabec
	cmsg002=$ctitle
	cmsg003="Bem-vindo ao instalador do $cdistro"
	cmsg004="Escolha uma opção:"
	cmsgBaixar_pacote_de_instalacao="Baixar pacote de instalacao"
	cmsg006="Particionar Disco"
	cmsg007="Escolha partição"
	cmsg008="Sair do instalador"
	cmsgquit="Sair do instalador"
	cmsg009="Escolha o disco de ORIGEM:"
	cmsgdest="Escolha o disco de DESTINO:"
	cmsg010="Escolha o tipo:"
	cmsg011="Particionamento manual usando cfdisk"
	cmsg012="Experiente"
	cexpert="Experiente"
	cnewbie="Novato"
	cmsg013="Particionamento automatico (sfdisk)"
	cmsg014="Tem certeza?"
	cmsg015="A versão mínima não inclui o Xorg e DE.\nVocê gostaria de baixar o $cdistro minimal?"
	cmsg016="Você gostaria de baixar o $cdistro full?"
	cmsg017='Download cancelado!'
	cancelinst="Instalacao cancelada!"
	cancelbind="Chroot cancelado!"
	cmsgversion=$cmsg015
	cmsg018="Baixar pacote full (X)"
	cmsg019="Baixar pacote minimal"
	cmsgTodos_os_dados_serao_perdidos="** AVISO ** Todos os dados disco DESTINO abaixo serão perdidos!"
	cmsg021="Formatar partição"
	menuquit="Sair"
	menustep="Passo a passo"
	yeslabel="Sim"
	nolabel="Não"
	cdlok1="*** DOWNLOAD *** "
	cdlok2="\n[OK] Download concluído com sucesso."
	cdlok3="encontrado."
	cdlok4="\n\nIniciar a instalação agora?"
	cshaok="\n[OK] Checksum verificado com sucesso."
   plswait="Por favor aguarde, baixando pacote..."
	cfinish="Instalação completa!\nReboot para iniciar com $cdistro Linux.\n\nBugs? $xemail"
	cgrubsuccess="GRUB instalado com sucesso!"
	ccancelgrub="Instalação do GRUB cancelada!"
	cmsgInstalar_GRUB="Instalar GRUB"
	cmsgAlterar_FSTAB="Alterar FSTAB"
	cinitbind="Iniciar BIND"
	cconfuser="Configurar usuario e senha"
	cconfusernow="Configurar usuário e senha agora"
	ccreatenewuser="Criar um novo usuário"
	cGrubMsgInstall="Você gostaria de instalar o GRUB?"
	cchooseX="Escolha o seu ambiente de Desktop"
	cxfce4="Clássico e poderoso!"
	ci3wm="Desktop para caras avançados B)."
	cmsgmin="Instalação mínima, sem X"
	cmsgfull="Instalação completa. *8.2G de disco (Xfce4 ou i3wm)"
	cwgeterro0="Sem problemas"
	cwgeterro1="Erro genérico"
	cwgeterro2="Erro de parse"
	cwgeterro3="Erro de I/IO no arquivo"
	cwgeterro4="Falha na rede"
	cwgeterro5="Falha na verificação do certificado SSL"
	cwgeterro6="Falha na autenticação (usuário ou senha)"
	cwgeterro7="Erro de protocolo"
	cwgeterro8="Servidor enviou uma respostar de erro"
	cerrotar0="Sucesso"
	cerrotar1="Árvore de diretório ruim, não conseguiu extrair um arquivo solicitado, \
   			   \narquivo de entrada igual ao arquivo de saída, falha ao abrir o arquivo de entrada, \
			   \nnão foi possível criar um  link, tabela link  malloc  falhouSucesso"
	cerrotar2="Erro de internacionalização que nunca deveria ocorrer, erro de checksum"
	cerrotar5="Erro de checksum"
	cerrotar9="(EBADF) - Erro lendo /etc/default/tar, fim de volume mal colocado"
	cerrotar12="(ENOMEM) – falha na alocação de memória para buffer"
	cerrotar22="(EINVAL) – invocação ruim (erros de sintaxe do arqumento),\
                \nparâmetros ruins para opções(ENOMEM) – falha na alocação de memória para buffer"
	cerrotar28="(ENOSPC) – arquivo muito grande para um volume"
	cerrotar78="(ENAMETOOLONG) - cwd name muito longo"
	cerrotar171="(ETOAST) – unidade de fitas on fire"
	ctools="Ferramentas/Configurações"
	cmsgtestarota="Aguarde, testando rota para o servidor $cdistro..."
	cmsgdelsha256="Aguarde, excluindo SHA256SUM antigo..."
	cmsgusermanager="Gerenciamento de usuários $cdistro Linux"
	cmsgPacotes_disponiveis="Pacotes disponiveis"
	cmsggetshasum="Aguarde, baixando sha256sum novo..."
	cmsgdelpackageindex="Aguarde, excluindo indice antigo..."
   cmsgdeltarball="Aguarde, excluindo tarball antigo..."
   cmsgtestsha256sum="Aguarde, testando sha256sum"
	cmsgadduser="Aguarde, criando usuario..."
	cmsgaddhost="Aguarde, setando hostname..."
   cmsgerrotar="Erro na descompatacao do pacote"
	cmsgwaitgrub="Aguarde, instalando o GRUB no disco"
	cmsgnoroute="Ops, sem rota para o servidor da $cdistro!\nVerifique sua internet."
	cmsgerrodlsha1="Ops, erro no download de !\nVerifique sua internet."
	cmsgerrodlsha2="Verifique sua internet."
	cmsgcorrdlnew="Ops, Pacote ou SHA256 corrompido. \nBaixar novamente o pacote?"
	cmsg_corr_rep="Ops, Pacote ou SHA256 corrompido. \nFavor repetir a operação!"
	cmsg_erro_tar_continue="Erro na descompactação do pacote. \nDeseja ainda prosseguir?"
	cmsg_all_ready="Tudo pronto para iniciar a instalação. Confirma?"
   cmsg_wget_package_index="Aguarde, baixando indice dos pacotes..."
	cmsg_nec_dismount="Necessário desmontar particao para reparticionar automaticamente."
	cwarning="** AVISO **"
	cmsg_alert_mount="Só para lembrar que o disco contém partições montadas."
	cmsgA_particao_esta_montada="A partição está montada"
	cmsg_dismount="Desmontar?"
	cmsg_all_mounted_part="O disco selecionado contém partições montadas."
	cmsg_umount_partition="Aguarde, Desmontando particao de trabalho."
	cmsg_create_dir="Aguarde, criando diretorio de trabalho."
	cmsg_mount_partition="Aguarde, Montando particao de trabalho."
	cmsg_try_mount_partition="Particao já montada. Tentar?"
	cmsg_mount_failed="Falha de montagem da partição. Repetir?"
	cmsg_enter_work_dir="Aguarde, Entrando no diretorio de trabalho."
	cmsg_mkfs_ok="Formatacao terminada com sucesso."
	cmsg_mkfs_error="Erro na Formatacao."
	cdisco="DISCO"
	cmsg_disco_origem="DISCO DE ORIGEM"
	cmsg_disco_destino="DISCO DE DESTINO"
	cparticao="PARTIÇÃO"
	cmsg_extracting="Aguarde, extraindo arquivos..."
	cmsg_part_disk="Visualizar partições do disco"
    cmsg_prepare_disk="Aguarde, preparando o disco:"
    cmsg_install_grub_disk="Instalando GRUB no disco"
    cmsg_Detectada_particao_EFI="Detectada partição EFI"
    cmsg_Deseja_instalar_o_GRUB_EFI="Deseja instalar o GRUB EFI"
    cmsg_Sim_EFI="Sim=EFI"
    cmsg_Nao_MBR="Não=MBR"
    cmsg_Desmontando_particao="Desmontando partição"
    cmsg_Formatando_particao="Formatando partição"
    cmsg_Montando_particao="Montando partição"
    cmsg_Instalando_GRUB_EFI_na_particao="Instalando GRUB EFI na partição"
	cmsgInstalacao_Automatica="Instalacao Automatica"
    cmsgInstalacao_Automatica_cancelada="Instalacao Automatica cancelada"
    cmsgErro_na_formatacao="Erro na formatação"
    cmsgErro_no_particionamento="Erro no particionamento"
    cmsgGerando_arquivo_configuracao_do_grub="Gerando arquivo de configuracao do grub"
	cmsgNeste_modo_a_instalacao_sera_automatizada="Neste modo a instalação será automatizada"
	cmsgDeseja_continuar_e_escolher_o_disco_destino="Deseja continuar e escolher o disco destino"
}

function en_US()
{
	lang="en_US"
	buttonback="Back"
	buttonpart="Disk Info"
  	cmsgErro="ERROR"
  	cmsgNaoEncontreiOComando="não encontrei o comando "
  	cmsgEsseScriptPrecisaDosComandosListadosAcima="Esse script precisa dos comandos listados acima"
   cmsgInstaleOuVerifique="Instale-os e/ou verifique se estão no seu \$PATH"
	cmsgOK="Ok"
	cmsg000="Exit"
	cmsg_select="Select"
	cmsg001=$ccabec
	cmsg002=$ctitle
	cmsg003=$welcome
	cmsg004="Choose an option:"
	cmsgBaixar_pacote_de_instalacao="Download installation package"
	cmsg006="Partition Disk"
	cmsg007="Choose partition"
	cmsg008="Quit the installer"
	cmsgquit="Quit the installer"
	cmsg009="Choose the SOURCE disk:"
	cmsgdest="Choose the DESTINATION disk:"
	cmsg010="Choose type:"
	cmsg011="Manual partitioning using cfdisk"
	cmsg012="Expert"
	cexpert="Expert"
	cnewbie="Newbie"
	cmsg013="Automatic partitioning (sfdisk)"
	cmsg014="Are you sure?"
	cmsg015="The minimum version does not include Xorg and DE. \nWould you like to download $cdistro minimal?"
	cmsg016='Would you like to download $cdistro full?'
	cmsgversion=$cmsg015
	cmsg017='Download canceled!'
	cancelinst="Installation canceled!"
	cancelbind="Chroot canceled!"
	cmsg018="Download full package (X)"
	cmsgTodos_os_dados_serao_perdidos="** NOTICE ** Will data will be lost!"
	cmsg021="Format partition"
	menuquit="Quit"
	menustep="Step by step"
	yeslabel="Yes"
	nolabel="No"
	cdlok1="*** DOWNLOAD ***"
	cdlok2="\n[OK] Download completed successfully."
	cdlok3="found."
	cdlok4="\n\nStart the installation now?"
	cshaok="\n[OK] Checksum successfully verified."
    plswait="Please wait, Downloading package..."
	cfinish="Install Complete!\nReboot to start with $cdistro Linux. \n\nBugs? $xemail"
	cgrubsuccess="GRUB successfully installed!"
	ccancelgrub="Installing grub canceled!"
	cmsgInstalar_GRUB="Install GRUB"
	cmsgAlterar_FSTAB="Change FSTAB"
	cinitbind="Start BIND"
	cconfuser="Configure user and password"
	cconfusernow="Configure user and password now"
	ccreatenewuser="Create a new user"
	#cGrubMsgInstall="Would you like to install grub? \
    #  				\n\n*Remembering that we do not yet have dual boot support. \
    #				\nIf use dualboot, use the grub from its other distribution with:\n# update-grub"
	cGrubMsgInstall="Would you like to install grub?"
	cchooseX="Choose your Desktop Environment"
	cxfce4="Classic and powerfull!"
	ci3wm="Desktop for avanced guys B)."
	cmsgmin="Minimum installation, not X"
   	cmsgfull="Complete installation. *8.2G disk (Xfce4 or i3wm)"
	cwgeterro0="Sem problemas"
	cwgeterro1="Erro genérico"
	cwgeterro2="Erro de parse"
	cwgeterro3="Erro de I/IO no arquivo"
	cwgeterro4="Falha na rede"
	cwgeterro5="Falha na verificação do certificado SSL"
	cwgeterro6="Falha na autenticação (usuário ou senha)"
	cwgeterro7="Erro de protocolo"
	cwgeterro8="Servidor enviou uma respostar de erro"
	cerrotar0="Sucesso"
	cerrotar1="Árvore de diretório ruim, não conseguiu extrair um arquivo solicitado, \
   			   \narquivo de entrada igual ao arquivo de saída, falha ao abrir o arquivo de entrada, \
			   \nnão foi possível criar um  link, tabela link  malloc  falhouSucesso"
	cerrotar2="Erro de internacionalização que nunca deveria ocorrer, erro de checksum"
	cerrotar5="Erro de checksum"
	cerrotar9="(EBADF) - Erro lendo /etc/default/tar, fim de volume mal colocado"
	cerrotar12="(ENOMEM) – falha na alocação de memória para buffer"
	cerrotar22="(EINVAL) – invocação ruim (erros de sintaxe do arqumento),\
                \nparâmetros ruins para opções(ENOMEM) – falha na alocação de memória para buffer"
	cerrotar28="(ENOSPC) – arquivo muito grande para um volume"
	cerrotar78="(ENAMETOOLONG) - cwd name muito longo"
	cerrotar171="(ETOAST) – unidade de fitas on fire"
	ctools="Tools/Settings"
	cmsgtestarota="Please wait, testing route to the $cdistro server..."
	cmsgdelsha256="Please wait, deleting old SHA256SUM..."
	cmsgusermanager="$cdistro Linux user management"
	cmsgPacotes_disponiveis="Available packages"
    cmsggetshasum="Please wait, download sha256sum new..."
	cmsgdelpackageindex="Please wait, deleting old index..."
    cmsgdeltarball="Please wait, deleting old tarball..."
    cmsgtestsha256sum="Wait, testing sha256sum"
	cmsgadduser="Please wait, creating user..."
	cmsgaddhost="Please wait, setting hostname..."
    cmsgerrotar="Error in package unpacking"
	cmsgwaitgrub="Please wait, installing grub to disk"
	cmsgnoroute="Oops, no route to the $cdistro server! \nCheck your internet."
	cmsgerrodlsha1="Ops, error downloading of"
	cmsgerrodlsha2="Check your internet."
	cmsgcorrdlnew="Ops, corrupted package or SHA256. \nDownload the package again?"
	cmsg_corr_rep="Ops, corrupted package or SHA256. \nPlease retry the operation!"
	cmsg_erro_tar_continue="Error in decompressing the package. \nDo you want to continue?"
	cmsg_all_ready="All ready to begin the installation. Do you confirm?"
    cmsg_wget_package_index="Wait, downloading package index..."
	cmsg_nec_dismount="Need to dismount partition to repartition automatically."
	cwarning="** WARNING **"
	cmsg_alert_mount="Just to remember that the disk contains mounted partitions."
	cmsgA_particao_esta_montada="The partition is mounted"
	cmsg_dismount="Disassemble?"
	cmsg_all_mounted_part="The selected disk contains mounted partitions."
	cmsg_umount_partition="Please wait, dismantling the working partition."
	cmsg_create_dir="wait, creating working directory."
	cmsg_mount_partition="Please wait, setting up workpart."
	cmsg_try_mount_partition="Partition already mounted. Try?"
	cmsg_mount_failed="Partition mount failed. Repeat?"
	cmsg_enter_work_dir="Please wait, entering the work directory."
	cmsg_mkfs_ok="Formation completed successfully."
	cmsg_mkfs_error="Formatting error."
	cdisco="DISK"
	cmsg_disco_origem="SOURCE DISK"
	cmsg_disco_destino="DESTINATION DISK"
	cparticao="PARTITION"
	cmsg_extracting="Wait, Extracting files..."
	cmsg_part_disk="View disk partitions"
    cmsg_prepare_disk="Wait, preparing the disk:"
    cmsg_install_grub_disk="Installing grub on disk"
    cmsg_Detectada_particao_EFI="Detected EFI partition"
    cmsg_Deseja_instalar_o_GRUB_EFI="Do you want to install EFI grub"
    cmsg_Sim_EFI="Yes=EFI"
    cmsg_Nao_MBR="No=MBR"
    cmsg_Desmontando_particao="Unmounting partition"
    cmsg_Formatando_particao="Formatting partition"
    cmsg_Montando_particao="Mounting partition"
    cmsg_Instalando_GRUB_EFI_na_particao="Installing EFI grub on partition"
	cmsgInstalacao_Automatica="Automatic installation"
    cmsgInstalacao_Automatica_cancelada="Automatic installation canceled"
    cmsgErro_na_formatacao="Error in formatting"
    cmsgErro_no_particionamento="Partitioning error"
    cmsgGerando_arquivo_configuracao_do_grub="Generating Grub configuration file"
	cmsgNeste_modo_a_instalacao_sera_automatizada="In this mode an installation will be automated"
	cmsgDeseja_continuar_e_escolher_o_disco_destino="Do you want to continue and choose the destination disk"
}

function scrend()
{
	exit $1
}

function sh_checkroot()
{
	if [ "$(id -u)" != "0" ]; then
		alerta "$ctitle" "\nYou should run this script as root!"
		scrend 0
	fi
}


function init()
{

	while true; do
		i18=$(dialog															\
			--stdout                                              \
			--backtitle	 	"$ccabec"				                  \
			--title 			"$welcome"			                    	\
			--ok-label		"$cmsgOK"	 									\
			--cancel-label	"$cmsg000"	 									\
			--menu			'\nChoose the language:'					\
	        	0 80 0                                 				\
				1 'Português'						 							\
	       	2 'English'							  							)

			exit_status=$?
			case $exit_status in
				$ESC)
					clear
					scrend 1
					;;
				$CANCEL)
               clear
					scrend 0
					;;
			esac
			case $i18 in
				1)
					pt_BR
					choosedisk
					;;
				2)
					en_US
					choosedisk
					;;
			esac
	done
}


function checkDependencies()
{
	local errorFound=0
	for command in "${DEPENDENCIES[@]}"; do
   if ! which "$command"  &> /dev/null ; then
   	printf "%s\n" "$(DOT)${red}$cmsgErro: $cmsgNaoEncontreiOComando ${yellow}'$command'${reset}"
     	errorFound=1
	fi
  	done

  	if [[ "$errorFound" != "0" ]]; then
   	echo
    	printf "%s\n" "$cmsgEsseScriptPrecisaDosComandosListadosAcima"
    	printf "%s\n" "$cmsgInstaleOuVerifique"
    	exit 1
  	fi
}

function sh_version()
{
   printf "$0 $_VERSION_\n"
}

#figlet
function logo()
{
   cat << 'EOF'
      _                      _ _     _
  ___| | ___  _ __   ___  __| (_)___| | __   Copyright (c) 2019-2022 Vilmar Catafesta <vcatafesta@gmail.com>
 / __| |/ _ \| '_ \ / _ \/ _` | / __| |/ /   Copyright (c) 2019-2022 Chilios Linux Development Team
| (__| | (_) | | | |  __/ (_| | \__ \   <
 \___|_|\___/|_| |_|\___|\__,_|_|___/_|\_\   Este programa pode ser redistribuído livremente
                                             sob os termos da Licença Pública Geral GNU.
EOF
   sh_version
}

# entrypoint - configuracao inicial
setvarcolors
en_US
sh_checkroot
checkDependencies
if [[ $1 = "-v" ]] || [[ $1 = "--version" ]] || [[ $1 = "-V" ]]; then
   logo
   exit 0
fi
init

:<<'LIXO'
Passagem padrão original de Lorem Ipsum, usada desde o século XVI.

"Lorem ipsum dolor sit amet, consectetur adipiscing elit, do eiusmod tempor incididunt ut labore et dolore magna aliqua.
Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure
dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non
proident, sunt in culpa qui officia deserunt mollit anim id est laborum."
'LIXO'

# vim:set ts=3 sw=3 et:
